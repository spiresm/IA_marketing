// netlify/functions/delete-tip.mjs

// Suppression de l'import de 'node-fetch' car 'fetch' est globalement disponible dans Netlify Functions

export default async (event, context) => {
    // --- NOUVEAU LOG POUR D√âBOGAGE ---
    // Log l'objet event complet pour inspecter la m√©thode HTTP et autres param√®tres
    console.log('üì° deleteTip: Requ√™te re√ßue. Objet event:', JSON.stringify(event, null, 2));

    // --- G√©rer la requ√™te de pr√©-v√©rification CORS (m√©thode OPTIONS) ---
    // Les navigateurs envoient une requ√™te OPTIONS avant une requ√™te HTTP complexe (comme DELETE)
    // pour v√©rifier si le serveur autorise la requ√™te r√©elle.
    if (event.httpMethod === 'OPTIONS') {
        console.log('üì° deleteTip: M√©thode OPTIONS d√©tect√©e. R√©ponse CORS preflight.');
        return new Response(null, {
            status: 204, // Code de statut "No Content" pour une r√©ponse OPTIONS r√©ussie
            headers: {
                'Access-Control-Allow-Origin': '*', // Autorise toutes les origines
                'Access-Control-Allow-Methods': 'DELETE, POST, GET, OPTIONS', // M√©thodes HTTP autoris√©es
                'Access-Control-Allow-Headers': 'Content-Type, Authorization', // En-t√™tes HTTP autoris√©s
                'Access-Control-Max-Age': '86400', // Cache la r√©ponse preflight pour 24 heures
            },
        });
    }

    // V√©rifier la m√©thode HTTP pour s'assurer que c'est un DELETE
    if (event.httpMethod !== 'DELETE') {
        console.error(`‚ùå deleteTip: M√©thode non autoris√©e re√ßue: ${event.httpMethod}. Seule DELETE est accept√©e.`);
        return new Response(JSON.stringify({ success: false, message: 'M√©thode non autoris√©e. Utilisez DELETE.' }), {
            status: 405,
            headers: { 'Content-Type': 'application/json' },
        });
    }

    const { id } = event.queryStringParameters; // R√©cup√©rer l'ID du tip depuis les param√®tres de l'URL

    if (!id) {
        console.error("‚ùå deleteTip: ID manquant dans les param√®tres de la requ√™te.");
        return new Response(JSON.stringify({ success: false, message: "ID du tip manquant. Impossible de supprimer." }), {
            status: 400,
            headers: { 'Content-Type': 'application/json' },
        });
    }

    try {
        // Il est recommand√© d'utiliser process.env.GITHUB_PAT pour les tokens avec des droits d'√©criture
        const token = process.env.GITHUB_TOKEN || process.env.GITHUB_PAT; // Fallback pour GITHUB_PAT
        const repoOwner = "spiresm"; // REMPLACER par votre nom d'utilisateur GitHub si diff√©rent
        const repoName = "IA_marketing"; // REMPLACER par le nom exact de votre d√©p√¥t
        const filePath = "all-tips.json"; // Le chemin complet du fichier all-tips.json dans le d√©p√¥t
        const branch = 'main'; // La branche de votre d√©p√¥t (ex: 'main' ou 'master')

        if (!token) {
            console.error("‚ùå GITHUB_TOKEN ou GITHUB_PAT manquant pour deleteTip. Veuillez le configurer.");
            return new Response(JSON.stringify({ success: false, message: "Token GitHub manquant. Impossible de supprimer le tip. Contactez l'administrateur." }), {
                status: 500,
                headers: { 'Content-Type': 'application/json' },
            });
        }

        console.log(`üì° deleteTip: Tentative de suppression du tip ID: ${id} sur GitHub.`);

        // --- √âtape 1 : Obtenir le SHA actuel du fichier all-tips.json ---
        // L'API GitHub DELETE requiert le SHA du fichier que vous voulez supprimer.
        // Nous devons d'abord faire un GET sur le fichier pour r√©cup√©rer son SHA et le contenu actuel.
        const getFileUrl = `https://api.github.com/repos/${repoOwner}/${repoName}/contents/${filePath}?ref=${branch}`;
        console.log(`üì° deleteTip: R√©cup√©ration du SHA et du contenu pour ${getFileUrl}`);

        const fileInfoRes = await fetch(getFileUrl, {
            method: "GET",
            headers: {
                Authorization: `Bearer ${token}`,
                "Accept": "application/vnd.github.v3.raw", // Demander le contenu brut directement
                "User-Agent": "Netlify-Function-deleteTip"
            },
        });

        if (!fileInfoRes.ok) {
            if (fileInfoRes.status === 404) {
                console.warn(`Le fichier ${filePath} n'existe pas. Impossible de supprimer le tip ${id}.`);
                return new Response(JSON.stringify({ success: false, message: `Le fichier des tips n'existe pas. Impossible de supprimer le tip ${id}.` }), {
                    status: 404,
                    headers: { 'Content-Type': 'application/json' },
                });
            }
            const errorText = await fileInfoRes.text();
            let errorMessage = `Erreur GitHub lors de la r√©cup√©ration du SHA/contenu du fichier: ${fileInfoRes.status}`;
            try {
                const errorJson = JSON.parse(errorText);
                errorMessage = errorJson.message || errorMessage;
            } catch (jsonParseError) {
                errorMessage += ` - ${errorText.substring(0, 200)}... (non-JSON)`;
            }
            console.error(`‚ùå deleteTip: ${errorMessage}`);
            return new Response(JSON.stringify({ success: false, message: `Impossible de r√©cup√©rer les informations du fichier des tips pour la suppression: ${errorMessage}` }), {
                status: fileInfoRes.status,
                headers: { 'Content-Type': 'application/json' },
            });
        }

        const currentContent = await fileInfoRes.text(); // Le contenu est d√©j√† brut (texte)
        const currentTipsData = JSON.parse(currentContent);

        // Obtenir le SHA du fichier directement √† partir des en-t√™tes ou d'une autre requ√™te si n√©cessaire.
        // L'API "getContents" renvoie le SHA dans le corps JSON si Accept est 'application/vnd.github.v3+json'.
        // Si Accept est 'application/vnd.github.v3.raw', on ne re√ßoit que le contenu.
        // Pour √™tre coh√©rent avec deletePrompt, faisons un appel pour obtenir le SHA s√©par√©ment si n√©cessaire.
        // Alternativement, on peut changer 'Accept' pour 'application/vnd.github.v3+json' et parser le JSON.
        // Pour simplifier et rester proche de deletePrompt, faisons une requ√™te HEAD ou GET s√©par√©e si n√©cessaire.
        // Cependant, l'approche la plus simple est de changer le type d'acceptation de la premi√®re requ√™te.
        // Utilisons getContents avec 'application/vnd.github.v3+json' pour r√©cup√©rer SHA et content ensemble.

        const getFileMetaUrl = `https://api.github.com/repos/${repoOwner}/${repoName}/contents/${filePath}?ref=${branch}`;
        const fileMetaRes = await fetch(getFileMetaUrl, {
            method: "GET",
            headers: {
                Authorization: `Bearer ${token}`,
                "Accept": "application/vnd.github.v3+json", // Demander le JSON pour le SHA
                "User-Agent": "Netlify-Function-deleteTip"
            },
        });

        if (!fileMetaRes.ok) {
            const errorText = await fileMetaRes.text();
            console.error(`‚ùå deleteTip: Erreur lors de la r√©cup√©ration des m√©tadonn√©es du fichier: ${fileMetaRes.status} - ${errorText}`);
            return new Response(JSON.stringify({ success: false, message: `Impossible de r√©cup√©rer les m√©tadonn√©es du fichier pour la suppression.` }), {
                status: 500,
                headers: { 'Content-Type': 'application/json' },
            });
        }
        const fileMetaData = await fileMetaRes.json();
        const fileSha = fileMetaData.sha;


        if (!fileSha) {
            console.error(`‚ùå deleteTip: SHA du fichier ${filePath} introuvable.`);
            return new Response(JSON.stringify({ success: false, message: `SHA du fichier des tips introuvable. Impossible de supprimer.` }), {
                status: 500,
                headers: { 'Content-Type': 'application/json' },
            });
        }

        console.log(`‚úÖ deleteTip: SHA du fichier ${filePath} r√©cup√©r√©: ${fileSha}`);

        // Filtrer la liste pour retirer le tip avec l'ID donn√©
        const initialLength = currentTipsData.length;
        const updatedTips = currentTipsData.filter(tip => String(tip.id) !== String(id)); // Convertir en String pour comparaison fiable
        console.log(`Tentative de suppression du tip ID: ${id}. Tips avant: ${initialLength}, Tips apr√®s: ${updatedTips.length}`);

        if (updatedTips.length === initialLength) {
            console.warn(`Tip avec l'ID ${id} non trouv√© ou aucune modification effectu√©e.`);
            return new Response(JSON.stringify({ success: false, message: `Tip avec l'ID ${id} non trouv√©.` }), {
                status: 404, // "Not Found" car la ressource sp√©cifique n'a pas √©t√© trouv√©e pour √™tre supprim√©e
                headers: { 'Content-Type': 'application/json' },
            });
        }

        // Pr√©parer le nouveau contenu JSON (encod√© en base64)
        const newContentBase64 = Buffer.from(JSON.stringify(updatedTips, null, 2)).toString('base64');

        // --- √âtape 2 : Envoyer la requ√™te PUT pour mettre √† jour le fichier all-tips.json sur GitHub ---
        // L'API GitHub pour modifier un fichier est PUT, pas DELETE.
        // La m√©thode DELETE est pour supprimer le fichier lui-m√™me, pas son contenu.
        const updateApiUrl = `https://api.github.com/repos/${repoOwner}/${repoName}/contents/${filePath}`;
        console.log(`üì° deleteTip: Envoi de la requ√™te PUT pour mettre √† jour ${updateApiUrl}`);

        const updateRes = await fetch(updateApiUrl, {
            method: "PUT", // Utilisation de PUT pour mettre √† jour le contenu du fichier
            headers: {
                Authorization: `Bearer ${token}`,
                "Accept": "application/vnd.github.v3+json",
                "Content-Type": "application/json",
                "User-Agent": "Netlify-Function-deleteTip"
            },
            body: JSON.stringify({
                message: `Suppression du tip: ${id}`, // Message de commit
                content: newContentBase64, // Le nouveau contenu du fichier
                sha: fileSha, // Le SHA de la version du fichier que nous modifions (obligatoire)
                branch: branch,
            }),
        });

        if (!updateRes.ok) {
            const errorText = await updateRes.text();
            let errorMessage = `Erreur GitHub lors de la mise √† jour du fichier: ${updateRes.status}`;
            try {
                const errorJson = JSON.parse(errorText);
                errorMessage = errorJson.message || errorMessage;
            } catch (jsonParseError) {
                errorMessage += ` - ${errorText.substring(0, 200)}... (non-JSON)`;
            }
            console.error(`‚ùå deleteTip: ${errorMessage}`);
            return new Response(JSON.stringify({ success: false, message: `Erreur lors de la suppression du tip sur GitHub: ${errorMessage}` }), {
                status: updateRes.status,
                headers: { 'Content-Type': 'application/json' },
            });
        }

        console.log(`‚úÖ deleteTip: Fichier ${filePath} mis √† jour avec succ√®s sur GitHub (tip ${id} supprim√© du contenu).`);

        // --- D√©clencher un nouveau d√©ploiement sur Netlify ---
        // C'est crucial pour que les changements dans all-tips.json soient propag√©s sur votre site live.
        const buildHookUrl = process.env.NETLIFY_BUILD_HOOK_URL;
        if (buildHookUrl) {
            console.log('üì° D√©clenchement du build hook Netlify...');
            const buildResponse = await fetch(buildHookUrl, { method: 'POST' });
            if (!buildResponse.ok) {
                console.error(`‚ùå √âchec du d√©clenchement du build hook Netlify: ${buildResponse.status} ${buildResponse.statusText}`);
            } else {
                console.log('‚úÖ Build hook Netlify d√©clench√© avec succ√®s.');
            }
        } else {
            console.warn('‚ö†Ô∏è La variable NETLIFY_BUILD_HOOK_URL n\'est pas configur√©e. Un d√©ploiement manuel sera n√©cessaire pour voir les changements.');
        }

        return new Response(JSON.stringify({ success: true, message: `Tip ${id} supprim√© avec succ√®s et d√©ploiement d√©clench√©.` }), {
            status: 200,
            headers: {
                'Content-Type': 'application/json',
                "Access-Control-Allow-Origin": "*", // CORS
                "Access-Control-Allow-Methods": "DELETE, POST, GET, OPTIONS", // Assurez-vous que les m√©thodes sont autoris√©es dans netlify.toml
                "Access-Control-Allow-Headers": "Content-Type, Authorization"
            },
        });

    } catch (error) {
        console.error('‚ùå deleteTip: Erreur g√©n√©rale lors de la suppression du tip :', error);
        return new Response(JSON.stringify({ success: false, message: `Erreur interne du serveur lors de la suppression du tip: ${error.message}` }), {
            status: 500,
            headers: {
                'Content-Type': 'application/json',
                "Access-Control-Allow-Origin": "*"
            },
        });
    }
};
