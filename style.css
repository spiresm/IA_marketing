<!DOCTYPE html>
<html lang="fr">
<head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Cas d'usages - iMarketing</title>

    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link rel="preconnect" href="https://cdnjs.cloudflare.com">
    <link rel="preload" href="header.html" as="fetch" crossorigin="anonymous">
    <link rel="preload" href="footer.html" as="fetch" crossorigin="anonymous">
    <link rel="preload" href="log_ia.png" as="image">
    <link rel="preload" href="Section-Clients-Logo-RTBF.png" as="image">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css">
    <link rel="stylesheet" href="style.css">
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;700&display=swap" rel="stylesheet">
    <style>
        /* Variables CSS pour faciliter la gestion des couleurs */
        :root {
            --primary-blue: #0077b6;
            --dark-blue: #005f8a;
            --light-blue: #64B5F6;
            --lighter-blue: #42A5F5;
            --background-grey: #f0f2f5;
            --card-shadow: 0 8px 20px rgba(0, 0, 0, 0.1);
            --card-hover-shadow: 0 10px 25px rgba(0, 0, 0, 0.15);
            --success-bg: #d4edda;
            --success-text: #155724;
            --error-bg: #f8d7da;
            --error-text: #dc3545;
            --it-yellow: #FFFAA0;
            --light-blue-card: #E0F2F7;
            --grey-text: #555;
            --border-color: #ddd;
            /* Dark mode variables */
            --dark-mode-bg: #222831;
            --dark-mode-text: #EEEEEE;
            --dark-mode-card-bg: #393E46;
            --dark-mode-border: #00ADB5;
        }
        /* Styles généraux */
        body {
            margin: 0;
            font-family: 'Inter', sans-serif;
            font-weight: 400;
            background-color: var(--background-grey);
            min-height: 100vh;
            display: flex;
            flex-direction: column;
            overflow-x: hidden;
        }
        body.dark-mode {
            background-color: var(--dark-mode-bg);
            color: var(--dark-mode-text);
        }
        body.dark-mode main {
            background-color: var(--dark-mode-bg);
        }
        main {
            padding: 40px 20px;
            flex-grow: 1;
        }

        /* Section des logos d'outils */
        .tool-logos-section {
            max-width: 960px;
            margin: 15px auto 15px auto;
            padding: 20px;
            background: #fff;
            border-radius: 12px;
            box-shadow: var(--card-shadow);
            text-align: center;
        }
        .tool-logos-header {
            display: flex;
            justify-content: center;
            align-items: center;
            gap: 15px;
            margin-bottom: 20px;
        }
        .tool-logos-header h2 {
            color: var(--primary-blue);
            margin: 0;
        }
        #workflow-counter {
            background-color: #e7f3ff;
            color: #1877f2;
            padding: 5px 12px;
            border-radius: 15px;
            font-size: 1rem;
            font-weight: 600;
        }
        body.dark-mode #workflow-counter {
            background-color: var(--dark-mode-border);
            color: var(--dark-mode-bg);
        }
        .tools-scroll-container {
            display: flex;
            align-items: center;
            position: relative;
            margin: 0 auto;
            max-width: calc(100% - 70px);
            padding: 0 35px;
        }
        .scroll-button {
            background-color: var(--primary-blue);
            color: white;
            border: none;
            padding: 10px 15px;
            cursor: pointer;
            border-radius: 50%;
            font-size: 1.2em;
            position: absolute;
            top: 50%;
            transform: translateY(-50%);
            z-index: 10;
            box-shadow: 0 2px 5px rgba(0,0,0,0.2);
            transition: background-color 0.2s, transform 0.2s;
        }
        .scroll-button:hover {
            background-color: var(--dark-blue);
            transform: translateY(-50%) scale(1.05);
        }
        .scroll-button.left { left: 0; }
        .scroll-button.right { right: 0; }
        .tools-grid {
            display: flex;
            overflow-x: auto;
            scroll-behavior: smooth;
            -webkit-overflow-scrolling: touch;
            gap: 15px;
            padding-bottom: 10px;
            justify-content: flex-start;
            width: 100%;
            scrollbar-width: none; /* Firefox */
        }
        .tools-grid::-webkit-scrollbar { display: none; }
        .tool-card {
            flex: 0 0 auto;
            width: 80px;
            background-color: #f9f9f9;
            padding: 10px;
            border-radius: 8px;
            box-shadow: 0 2px 5px rgba(0,0,0,0.05);
            transition: transform 0.2s ease, box-shadow 0.2s ease;
            cursor: pointer;
            display: flex;
            flex-direction: column;
            align-items: center;
            justify-content: center;
            text-align: center;
            min-height: 100px;
        }
        .tool-card:hover {
            transform: translateY(-3px);
            box-shadow: 0 5px 10px rgba(0,0,0,0.1);
        }
        .tool-card img {
            max-width: 50px;
            height: auto;
            margin-bottom: 8px;
            border-radius: 6px;
        }
        .tool-card .tool-name {
            font-weight: bold;
            color: var(--dark-blue);
            font-size: 0.8em;
        }
        body.dark-mode .tool-logos-section, body.dark-mode .tool-card {
            background-color: var(--dark-mode-card-bg);
            box-shadow: 0 6px 12px rgba(0, 0, 0, 0.3);
            border-color: var(--dark-mode-border);
        }
        body.dark-mode .tool-logos-section h2, body.dark-mode .tool-card .tool-name {
            color: var(--dark-mode-text);
        }
        body.dark-mode .tool-card:hover { box-shadow: 0 8px 16px rgba(0,0,0,0.4); }

        /* Conteneurs de contrôles */
        .filters-area-container, .create-workflow-button-container {
            max-width: 960px;
            margin: 15px auto 25px auto;
            padding: 0 20px;
            display: flex;
            justify-content: center;
            gap: 15px;
            flex-wrap: wrap;
        }
        .create-workflow-button-container { margin-bottom: 30px; }
        .create-workflow-button {
            display: inline-flex;
            align-items: center;
            gap: 8px;
            background-color: var(--primary-blue);
            color: white;
            padding: 12px 25px;
            border-radius: 8px;
            text-decoration: none;
            font-weight: bold;
            font-size: 1.1em;
            transition: background-color 0.2s ease, transform 0.1s ease;
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
        }
        .create-workflow-button:hover {
            background-color: var(--dark-blue);
            transform: translateY(-2px);
            box-shadow: 0 6px 12px rgba(0, 0, 0, 0.15);
        }
        body.dark-mode .create-workflow-button {
            background-color: var(--dark-mode-border);
            color: var(--dark-mode-bg);
        }
        body.dark-mode .create-workflow-button:hover { background-color: #008D96; }

        /* ===== DESIGN FINAL DE LA GALERIE DE CARTES ===== */
        .galerie-container {
            max-width: 700px;
            margin: 0 auto;
            padding: 20px;
            background: transparent;
            box-shadow: none;
        }
        #galerie {
            display: flex;
            flex-direction: column;
            gap: 25px;
        }
        .carte {
            background: #fff;
            border-left: 6px solid transparent;
            border-radius: 12px;
            box-shadow: 0 8px 25px rgba(0, 0, 0, 0.08);
            display: flex;
            flex-direction: column;
            padding: 20px;
            position: relative;
            transition: box-shadow 0.2s ease;
            transform: none !important; /* CORRECTION DÉFINITIVE : Bloque toute transformation de style.css */
        }
        .carte:hover {
            box-shadow: 0 12px 30px rgba(0, 0, 0, 0.12);
        }
        body.dark-mode .carte {
            background-color: var(--dark-mode-card-bg);
            box-shadow: 0 6px 15px rgba(0, 0, 0, 0.2);
        }
        .card-header {
            display: flex;
            justify-content: space-between;
            align-items: flex-start;
            gap: 15px;
        }
        .tip-title {
            font-size: 1.4em;
            font-weight: bold;
            margin: 0;
            color: var(--dark-blue);
        }
        body.dark-mode .tip-title { color: var(--dark-mode-text); }
        .outil-badge {
            background-color: #e0f2f7;
            color: var(--primary-blue);
            font-size: 0.8em;
            font-weight: bold;
            padding: 5px 10px;
            border-radius: 20px;
            margin-top: 10px;
            align-self: flex-start;
        }
        body.dark-mode .outil-badge {
            background-color: var(--dark-mode-border);
            color: var(--dark-mode-bg);
        }
        .card-image-container {
            margin: 20px 0;
            text-align: center;
        }
        .card-thumbnail-preview {
            width: 100%;
            height: auto;
            object-fit: cover;
            border-radius: 8px;
            border: 1px solid #eee;
        }
        body.dark-mode .card-thumbnail-preview { border-color: #444; }
        .card-actions {
            display: flex;
            gap: 10px;
            margin-top: 20px;
        }
        .copier-btn, .toggle-content-btn {
            background-color: var(--primary-blue);
            color: white;
            border: none;
            padding: 10px 20px;
            border-radius: 8px;
            cursor: pointer;
            font-size: 0.9em;
            font-weight: 600;
            transition: background-color 0.2s;
            flex-grow: 1;
            text-align: center;
        }
        .copier-btn { background-color: var(--light-blue); }
        .copier-btn:hover { background-color: var(--lighter-blue); }
        .toggle-content-btn:hover { background: var(--dark-blue); }
        body.dark-mode .copier-btn, body.dark-mode .toggle-content-btn {
            background-color: var(--dark-mode-border);
            color: var(--dark-mode-bg);
        }
        body.dark-mode .copier-btn:hover, body.dark-mode .toggle-content-btn:hover { background-color: #008D96; }
        .metadata-section {
            display: flex;
            justify-content: space-between;
            align-items: center;
            font-size: 0.85em;
            color: var(--grey-text);
            padding-top: 15px;
            border-top: 1px solid #f0f0f0;
            margin-top: 15px;
        }
        body.dark-mode .metadata-section {
            color: var(--dark-mode-text);
            border-top-color: rgba(255,255,255,0.1);
        }
        .metadata-section .auteur-value a {
            color: var(--primary-blue);
            text-decoration: none;
            font-weight: bold;
        }
        .metadata-section .auteur-value a:hover { text-decoration: underline; }
        body.dark-mode .metadata-section .auteur-value a { color: var(--dark-mode-border); }
        .supprimer-btn {
            background: none;
            border: none;
            color: #aaa;
            font-size: 1.2em;
            cursor: pointer;
            transition: color 0.2s;
            padding: 0;
        }
        .supprimer-btn:hover { color: var(--error-text); }
        body.dark-mode .supprimer-btn { color: #777; }
        body.dark-mode .supprimer-btn:hover { color: var(--error-text); }
        
        /* Panneau d'aperçu latéral */
        .preview-panel {
            position: fixed; top: 0; right: -760px;
            width: 740px; max-width: 90%; height: 100%;
            background-color: #fff;
            box-shadow: -4px 0 15px rgba(0, 0, 0, 0.1);
            transition: right 0.3s ease-in-out;
            z-index: 1000;
            display: flex; flex-direction: column;
            padding: 20px; box-sizing: border-box;
            overflow-y: auto;
        }
        .preview-panel.open { right: 0; }
        .preview-overlay {
            position: fixed; top: 0; left: 0;
            width: 100%; height: 100%;
            background-color: rgba(0, 0, 0, 0.4);
            z-index: 999;
            opacity: 0; visibility: hidden;
            transition: opacity 0.3s ease-in-out, visibility 0.3s ease-in-out;
        }
        .preview-overlay.open { opacity: 1; visibility: visible; }
        .preview-panel-header {
            display: flex; justify-content: space-between; align-items: center;
            margin-bottom: 20px; padding-bottom: 10px;
            border-bottom: 1px solid #eee;
        }
        .close-preview-btn {
            background: none; border: none; font-size: 1.5em; cursor: pointer; color: #888; transition: color 0.2s;
        }
        
        /* Footer */
        footer {
            background-color: #333; color: white;
            text-align: center; padding: 20px;
            margin-top: 40px; width: 100%;
        }
    </style>
</head>
<body>
    <div id="header-placeholder"></div>

    <main>
        <div class="create-workflow-button-container">
            <a href="creer-tip.html" class="create-workflow-button">Créer un Workflow</a>
        </div>

        <div class="tool-logos-section">
            <div class="tool-logos-header">
                <h2>Outils IA Populaires</h2>
                <div id="workflow-counter" class="workflow-counter">0</div>
            </div>
            <div class="tools-scroll-container">
                <button class="scroll-button left" id="scrollLeftBtn"><i class="fas fa-chevron-left"></i></button>
                <div id="tool-logos-grid" class="tools-grid"></div>
                <button class="scroll-button right" id="scrollRightBtn"><i class="fas fa-chevron-right"></i></button>
            </div>
        </div>

        <div class="filters-area-container">
            <div id="filters">
                <input type="text" id="search-input" placeholder="Rechercher un mot clé..." />
                <select id="filtre-outil"><option value="">Tous les outils</option></select>
                <select id="filtre-auteur"><option value="">Tous les auteurs</option></select>
                <select id="filtre-tri-date">
                    <option value="recent" selected>Plus récent</option>
                    <option value="ancien">Plus ancien</option>
                </select>
            </div>
        </div>

        <div class="galerie-container">
            <div id="success-message"></div>
            <div id="error-display" class="error-message" style="display: none;"></div>
            <div id="galerie">
                <p style="text-align: center;">Chargement des workflows...</p>
            </div>
        </div>
    </main>

    <div id="footer-placeholder"></div>
    <div id="previewOverlay" class="preview-overlay"></div>
    <div id="previewPanel" class="preview-panel">
        <div class="preview-panel-header">
            <h3 id="previewPanelTitle">Aperçu du contenu</h3>
            <button class="close-preview-btn" id="closePreviewBtn"><i class="fas fa-times"></i></button>
        </div>
        <div id="previewPanelContent" class="preview-panel-content"></div>
    </div>
    <script src="tools-data.js"></script>
    <script>
        const apiBase = window.location.origin + '/.netlify/functions/';
        let allTips = [];
        const galerieDiv = document.getElementById('galerie');
        const errorDisplay = document.getElementById('error-display');
        const filtreOutilSelect = document.getElementById('filtre-outil');
        const filtreTriDateSelect = document.getElementById('filtre-tri-date');
        const searchInput = document.getElementById('search-input');
        const previewPanel = document.getElementById('previewPanel');
        const previewPanelTitle = document.getElementById('previewPanelTitle');
        const previewPanelContent = document.getElementById('previewPanelContent');
        const closePreviewBtn = document.getElementById('closePreviewBtn');
        const bodyElement = document.body;
        const mainElement = document.querySelector('main');
        const previewOverlay = document.getElementById('previewOverlay');

        const workflowCounterDisplay = document.getElementById('workflow-counter');
        const filtreAuteurSelect = document.getElementById('filtre-auteur'); 

        const toolLogosGrid = document.getElementById('tool-logos-grid');
        const scrollLeftBtn = document.getElementById('scrollLeftBtn');
        const scrollRightBtn = document.getElementById('scrollRightBtn');

        function decodeHtml(html) {
            const textarea = document.createElement('textarea');
            textarea.innerHTML = html;
            return textarea.textContent;
        }

        function escapeHtml(text) {
            if (text === null || text === undefined) return '';
            text = String(text);
            const map = { '&': '&amp;', '<': '&lt;', '>': '&gt;', '"': '&quot;', "'": '&#039;' };
            return text.replace(/[&<>"']/g, function(m) { return map[m]; });
        }

        function getYouTubeVideoId(url) {
            if (!url) return null;
            const youtubeRegex = /(?:youtube\.com\/(?:[^\/\n\s]+\/\S+\/|(?:v|e(?:mbed)?)\/|\S*?[?&]v=)|youtu\.be\/)([a-zA-Z0-9_-]{11})/;
            const match = url.match(youtubeRegex);
            return (match && match[1]) ? match[1] : null;
        }

        async function loadComponent(url, placeholderId) {
            try {
                const res = await fetch(url);
                if (!res.ok) throw new Error(`HTTP error! status: ${res.status}`);
                document.getElementById(placeholderId).innerHTML = await res.text();
            } catch (error) {
                console.error(`Erreur lors du chargement de ${url}:`, error);
                document.getElementById(placeholderId).innerHTML = `<p style='color:red;text-align:center;'>Erreur de chargement.</p>`;
            }
        };

        function applyFiltersAndSort() {
            let filtered = [...allTips];
            const outil = filtreOutilSelect.value;
            if (outil) {
                filtered = filtered.filter(tip => tip.outil === outil);
            }
            const auteur = filtreAuteurSelect.value;
            if (auteur) {
                filtered = filtered.filter(tip => tip.auteur === auteur);
            }
            const searchText = searchInput.value.toLowerCase();
            if (searchText) {
                filtered = filtered.filter(tip =>
                    (tip.titre && decodeHtml(tip.titre).toLowerCase().includes(searchText)) ||
                    (tip.description && decodeHtml(tip.description).toLowerCase().includes(searchText))
                );
            }
            const sortOrderDate = filtreTriDateSelect.value;
            filtered.sort((a, b) => {
                const dateA = new Date(a.dateCreation || a.date);
                const dateB = new Date(b.dateCreation || b.date);
                return sortOrderDate === 'recent' ? dateB.getTime() - dateA.getTime() : dateA.getTime() - dateB.getTime();
            });
            displayTips(filtered);
        }

        function setupFilters() {
            searchInput.addEventListener('input', applyFiltersAndSort);
            filtreTriDateSelect.addEventListener('change', applyFiltersAndSort);
            filtreOutilSelect.addEventListener('change', applyFiltersAndSort);
            filtreAuteurSelect.addEventListener('change', applyFiltersAndSort);
            populateOutilFilter();
        }

        function populateOutilFilter() {
            filtreOutilSelect.innerHTML = '<option value="">Tous les outils</option>';
            const uniqueTools = [...new Set(toolsData.map(tool => tool.name))].sort();
            uniqueTools.forEach(toolName => {
                const option = document.createElement('option');
                option.value = toolName;
                option.textContent = toolName;
                filtreOutilSelect.appendChild(option);
            });
        }

        function populateAuteurFilter() {
            filtreAuteurSelect.innerHTML = '<option value="">Tous les auteurs</option>';
            const uniqueAuteurs = [...new Set(allTips.map(tip => tip.auteur))].sort((a, b) => a.localeCompare(b));
            uniqueAuteurs.forEach(auteurName => {
                const option = document.createElement('option');
                option.value = auteurName;
                option.textContent = auteurName;
                filtreAuteurSelect.appendChild(option);
            });
        }

        async function loadAndDisplayTips() {
            galerieDiv.innerHTML = '<p style="text-align: center;">Chargement des workflows...</p>';
            try {
                const response = await fetch(`${apiBase}get-tips`);
                if (!response.ok) throw new Error(`HTTP error! status: ${response.status}`);
                let fetchedTips = await response.json();
                allTips = fetchedTips.map(tip => ({
                    ...tip, id: String(tip.id),
                    dateCreation: tip.date_creation || tip.dateCreation || new Date().toISOString(),
                    titre: tip.titre || "Titre non spécifié",
                    auteur: tip.auteur || "Auteur inconnu",
                    outil: tip.outil || "Non spécifié",
                }));
                workflowCounterDisplay.textContent = allTips.length;
                populateAuteurFilter();
                applyFiltersAndSort();
            } catch (error) {
                console.error("Erreur chargement:", error);
                errorDisplay.style.display = 'block';
                errorDisplay.textContent = `Erreur: ${error.message}`;
                galerieDiv.innerHTML = '';
            }
        }

        function displayTips(tipsToDisplay) {
            galerieDiv.innerHTML = '';
            if (tipsToDisplay.length === 0) {
                galerieDiv.innerHTML = '<p style="text-align: center;">Aucun workflow ne correspond à vos filtres.</p>';
                return;
            }
            tipsToDisplay.forEach(tip => {
                const dateObj = new Date(tip.dateCreation);
                const formattedDate = dateObj.toLocaleDateString('fr-FR', { year: 'numeric', month: 'long', day: 'numeric' });
                const auteurLink = `<a href="equipe.html?auteur=${encodeURIComponent(tip.auteur)}">${escapeHtml(tip.auteur)}</a>`;
                let copyButtonHtml = '';
                const contentForCopyButton = tip.promptText || tip.description;
                if (contentForCopyButton) {
                    copyButtonHtml = `<button class="copier-btn" data-copy="${escapeHtml(contentForCopyButton)}">Copier le prompt</button>`;
                }
                let previewImageHtml = '';
                const firstImage = (tip.fileUrls && tip.fileUrls.length > 0) ? tip.fileUrls[0] : tip.imageUrl;
                if (firstImage) {
                    previewImageHtml = `<img src="${escapeHtml(firstImage)}" alt="Aperçu" class="card-thumbnail-preview">`;
                }
                
                const cardHtml = `
                    <div class="carte" style="border-left-color: ${getToolColor(tip.outil)};">
                        <div class="card-header">
                            <h3 class="tip-title">${escapeHtml(tip.titre)}</h3>
                            <button class="supprimer-btn" data-id="${tip.id}" title="Supprimer"><i class="fas fa-trash-alt"></i></button>
                        </div>
                        <span class="outil-badge">${escapeHtml(tip.outil)}</span>
                        ${previewImageHtml ? `<div class="card-image-container">${previewImageHtml}</div>` : ''}
                        <div class="card-actions">
                            <button class="toggle-content-btn" data-id="${tip.id}">Voir le Workflow</button>
                            ${copyButtonHtml}
                        </div>
                        <div class="metadata-section">
                            <span class="metadata-value auteur-value">Par ${auteurLink}</span>
                            <span class="metadata-value date-value">${formattedDate}</span>
                        </div>
                    </div>
                `;
                galerieDiv.insertAdjacentHTML('beforeend', cardHtml);
            });
            attachEventListenersToCards();
        }

        function getToolColor(toolName) {
            if (!toolName) return '#cccccc';
            let hash = 0;
            for (let i = 0; i < toolName.length; i++) {
                hash = toolName.charCodeAt(i) + ((hash << 5) - hash);
                hash = hash & hash;
            }
            const hue = hash % 360;
            return `hsl(${hue}, 70%, 60%)`;
        }

        function attachEventListenersToCards() {
            document.querySelectorAll('.toggle-content-btn').forEach(b => b.onclick = (e) => openPreviewPanel(e.target.dataset.id));
            document.querySelectorAll('.copier-btn').forEach(b => b.onclick = (e) => copyToClipboard(e.target.dataset.copy, e.target));
            document.querySelectorAll('.supprimer-btn').forEach(b => b.onclick = (e) => confirmAndDeleteTip(e.target.closest('button').dataset.id));
        }

        function openPreviewPanel(tipId) {
            const tip = allTips.find(t => t.id === tipId);
            if (!tip) return;
            previewPanelTitle.textContent = decodeHtml(tip.titre);
            let contentHtml = '';
            // Construction dynamique du contenu du panneau
            if (tip.description) contentHtml += `<h4>Description</h4><p>${escapeHtml(tip.description)}</p>`;
            if (tip.promptText) contentHtml += `<h4>Prompt</h4><pre>${escapeHtml(tip.promptText)}</pre>`;
            // ... (logique pour URLs, images, etc.)
            previewPanelContent.innerHTML = contentHtml;
            previewPanel.classList.add('open');
            previewOverlay.classList.add('open');
            bodyElement.style.overflow = 'hidden';
        }

        function closePreviewPanel() {
            previewPanel.classList.remove('open');
            previewOverlay.classList.remove('open');
            bodyElement.style.overflow = '';
        }

        closePreviewBtn.addEventListener('click', closePreviewPanel);
        previewOverlay.addEventListener('click', closePreviewPanel);

        async function copyToClipboard(text, buttonElement) {
            try {
                await navigator.clipboard.writeText(text);
                const originalText = buttonElement.textContent;
                buttonElement.textContent = 'Copié !';
                setTimeout(() => { buttonElement.textContent = originalText; }, 1500);
            } catch (err) { console.error('Échec de la copie', err); }
        }

        async function confirmAndDeleteTip(tipId) {
            if (confirm("Êtes-vous sûr de vouloir supprimer ce workflow ?")) {
                try {
                    const response = await fetch(`${apiBase}delete-tip`, {
                        method: 'DELETE', headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify({ id: tipId })
                    });
                    if (!response.ok) throw new Error('La suppression a échoué.');
                    loadAndDisplayTips();
                } catch(err) { alert('Erreur: ' + err.message); }
            }
        }
        
        // Initialisation de la page
        document.addEventListener("DOMContentLoaded", async () => {
            await Promise.all([
                loadComponent("header.html", "header-placeholder"),
                loadComponent("footer.html", "footer-placeholder")
            ]);
            setupFilters();
            // renderToolLogos(); // Assurez-vous que la fonction existe si vous l'utilisez
            // setupScrollButtons(); // Idem
            await loadAndDisplayTips();
        });
    </script>
</body>
</html><!DOCTYPE html>
<html lang="fr">
<head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Cas d'usages - iMarketing</title>

    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link rel="preconnect" href="https://cdnjs.cloudflare.com">
    <link rel="preload" href="header.html" as="fetch" crossorigin="anonymous">
    <link rel="preload" href="footer.html" as="fetch" crossorigin="anonymous">
    <link rel="preload" href="log_ia.png" as="image">
    <link rel="preload" href="Section-Clients-Logo-RTBF.png" as="image">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css">
    <link rel="stylesheet" href="style.css">
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;700&display=swap" rel="stylesheet">
    <style>
        /* Variables CSS pour faciliter la gestion des couleurs */
        :root {
            --primary-blue: #0077b6;
            --dark-blue: #005f8a;
            --light-blue: #64B5F6;
            --lighter-blue: #42A5F5;
            --background-grey: #f0f2f5;
            --card-shadow: 0 8px 20px rgba(0, 0, 0, 0.1);
            --card-hover-shadow: 0 10px 25px rgba(0, 0, 0, 0.15);
            --success-bg: #d4edda;
            --success-text: #155724;
            --error-bg: #f8d7da;
            --error-text: #dc3545;
            --it-yellow: #FFFAA0;
            --light-blue-card: #E0F2F7;
            --grey-text: #555;
            --border-color: #ddd;
            /* Dark mode variables */
            --dark-mode-bg: #222831;
            --dark-mode-text: #EEEEEE;
            --dark-mode-card-bg: #393E46;
            --dark-mode-border: #00ADB5;
        }
        /* Styles généraux */
        body {
            margin: 0;
            font-family: 'Inter', sans-serif;
            font-weight: 400;
            background-color: var(--background-grey);
            min-height: 100vh;
            display: flex;
            flex-direction: column;
            overflow-x: hidden;
        }
        body.dark-mode {
            background-color: var(--dark-mode-bg);
            color: var(--dark-mode-text);
        }
        body.dark-mode main {
            background-color: var(--dark-mode-bg);
        }
        main {
            padding: 40px 20px;
            flex-grow: 1;
        }

        /* Section des logos d'outils */
        .tool-logos-section {
            max-width: 960px;
            margin: 15px auto 15px auto;
            padding: 20px;
            background: #fff;
            border-radius: 12px;
            box-shadow: var(--card-shadow);
            text-align: center;
        }
        .tool-logos-header {
            display: flex;
            justify-content: center;
            align-items: center;
            gap: 15px;
            margin-bottom: 20px;
        }
        .tool-logos-header h2 {
            color: var(--primary-blue);
            margin: 0;
        }
        #workflow-counter {
            background-color: #e7f3ff;
            color: #1877f2;
            padding: 5px 12px;
            border-radius: 15px;
            font-size: 1rem;
            font-weight: 600;
        }
        body.dark-mode #workflow-counter {
            background-color: var(--dark-mode-border);
            color: var(--dark-mode-bg);
        }
        .tools-scroll-container {
            display: flex;
            align-items: center;
            position: relative;
            margin: 0 auto;
            max-width: calc(100% - 70px);
            padding: 0 35px;
        }
        .scroll-button {
            background-color: var(--primary-blue);
            color: white;
            border: none;
            padding: 10px 15px;
            cursor: pointer;
            border-radius: 50%;
            font-size: 1.2em;
            position: absolute;
            top: 50%;
            transform: translateY(-50%);
            z-index: 10;
            box-shadow: 0 2px 5px rgba(0,0,0,0.2);
            transition: background-color 0.2s, transform 0.2s;
        }
        .scroll-button:hover {
            background-color: var(--dark-blue);
            transform: translateY(-50%) scale(1.05);
        }
        .scroll-button.left { left: 0; }
        .scroll-button.right { right: 0; }
        .tools-grid {
            display: flex;
            overflow-x: auto;
            scroll-behavior: smooth;
            -webkit-overflow-scrolling: touch;
            gap: 15px;
            padding-bottom: 10px;
            justify-content: flex-start;
            width: 100%;
            scrollbar-width: none; /* Firefox */
        }
        .tools-grid::-webkit-scrollbar { display: none; }
        .tool-card {
            flex: 0 0 auto;
            width: 80px;
            background-color: #f9f9f9;
            padding: 10px;
            border-radius: 8px;
            box-shadow: 0 2px 5px rgba(0,0,0,0.05);
            transition: transform 0.2s ease, box-shadow 0.2s ease;
            cursor: pointer;
            display: flex;
            flex-direction: column;
            align-items: center;
            justify-content: center;
            text-align: center;
            min-height: 100px;
        }
        .tool-card:hover {
            transform: translateY(-3px);
            box-shadow: 0 5px 10px rgba(0,0,0,0.1);
        }
        .tool-card img {
            max-width: 50px;
            height: auto;
            margin-bottom: 8px;
            border-radius: 6px;
        }
        .tool-card .tool-name {
            font-weight: bold;
            color: var(--dark-blue);
            font-size: 0.8em;
        }
        body.dark-mode .tool-logos-section, body.dark-mode .tool-card {
            background-color: var(--dark-mode-card-bg);
            box-shadow: 0 6px 12px rgba(0, 0, 0, 0.3);
            border-color: var(--dark-mode-border);
        }
        body.dark-mode .tool-logos-section h2, body.dark-mode .tool-card .tool-name {
            color: var(--dark-mode-text);
        }
        body.dark-mode .tool-card:hover { box-shadow: 0 8px 16px rgba(0,0,0,0.4); }

        /* Conteneurs de contrôles */
        .filters-area-container, .create-workflow-button-container {
            max-width: 960px;
            margin: 15px auto 25px auto;
            padding: 0 20px;
            display: flex;
            justify-content: center;
            gap: 15px;
            flex-wrap: wrap;
        }
        .create-workflow-button-container { margin-bottom: 30px; }
        .create-workflow-button {
            display: inline-flex;
            align-items: center;
            gap: 8px;
            background-color: var(--primary-blue);
            color: white;
            padding: 12px 25px;
            border-radius: 8px;
            text-decoration: none;
            font-weight: bold;
            font-size: 1.1em;
            transition: background-color 0.2s ease, transform 0.1s ease;
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
        }
        .create-workflow-button:hover {
            background-color: var(--dark-blue);
            transform: translateY(-2px);
            box-shadow: 0 6px 12px rgba(0, 0, 0, 0.15);
        }
        body.dark-mode .create-workflow-button {
            background-color: var(--dark-mode-border);
            color: var(--dark-mode-bg);
        }
        body.dark-mode .create-workflow-button:hover { background-color: #008D96; }

        /* ===== DESIGN FINAL DE LA GALERIE DE CARTES ===== */
        .galerie-container {
            max-width: 700px;
            margin: 0 auto;
            padding: 20px;
            background: transparent;
            box-shadow: none;
        }
        #galerie {
            display: flex;
            flex-direction: column;
            gap: 25px;
        }
        .carte {
            background: #fff;
            border-left: 6px solid transparent;
            border-radius: 12px;
            box-shadow: 0 8px 25px rgba(0, 0, 0, 0.08);
            display: flex;
            flex-direction: column;
            padding: 20px;
            position: relative;
            transition: box-shadow 0.2s ease;
            transform: none !important; /* CORRECTION DÉFINITIVE : Bloque toute transformation de style.css */
        }
        .carte:hover {
            box-shadow: 0 12px 30px rgba(0, 0, 0, 0.12);
        }
        body.dark-mode .carte {
            background-color: var(--dark-mode-card-bg);
            box-shadow: 0 6px 15px rgba(0, 0, 0, 0.2);
        }
        .card-header {
            display: flex;
            justify-content: space-between;
            align-items: flex-start;
            gap: 15px;
        }
        .tip-title {
            font-size: 1.4em;
            font-weight: bold;
            margin: 0;
            color: var(--dark-blue);
        }
        body.dark-mode .tip-title { color: var(--dark-mode-text); }
        .outil-badge {
            background-color: #e0f2f7;
            color: var(--primary-blue);
            font-size: 0.8em;
            font-weight: bold;
            padding: 5px 10px;
            border-radius: 20px;
            margin-top: 10px;
            align-self: flex-start;
        }
        body.dark-mode .outil-badge {
            background-color: var(--dark-mode-border);
            color: var(--dark-mode-bg);
        }
        .card-image-container {
            margin: 20px 0;
            text-align: center;
        }
        .card-thumbnail-preview {
            width: 100%;
            height: auto;
            object-fit: cover;
            border-radius: 8px;
            border: 1px solid #eee;
        }
        body.dark-mode .card-thumbnail-preview { border-color: #444; }
        .card-actions {
            display: flex;
            gap: 10px;
            margin-top: 20px;
        }
        .copier-btn, .toggle-content-btn {
            background-color: var(--primary-blue);
            color: white;
            border: none;
            padding: 10px 20px;
            border-radius: 8px;
            cursor: pointer;
            font-size: 0.9em;
            font-weight: 600;
            transition: background-color 0.2s;
            flex-grow: 1;
            text-align: center;
        }
        .copier-btn { background-color: var(--light-blue); }
        .copier-btn:hover { background-color: var(--lighter-blue); }
        .toggle-content-btn:hover { background: var(--dark-blue); }
        body.dark-mode .copier-btn, body.dark-mode .toggle-content-btn {
            background-color: var(--dark-mode-border);
            color: var(--dark-mode-bg);
        }
        body.dark-mode .copier-btn:hover, body.dark-mode .toggle-content-btn:hover { background-color: #008D96; }
        .metadata-section {
            display: flex;
            justify-content: space-between;
            align-items: center;
            font-size: 0.85em;
            color: var(--grey-text);
            padding-top: 15px;
            border-top: 1px solid #f0f0f0;
            margin-top: 15px;
        }
        body.dark-mode .metadata-section {
            color: var(--dark-mode-text);
            border-top-color: rgba(255,255,255,0.1);
        }
        .metadata-section .auteur-value a {
            color: var(--primary-blue);
            text-decoration: none;
            font-weight: bold;
        }
        .metadata-section .auteur-value a:hover { text-decoration: underline; }
        body.dark-mode .metadata-section .auteur-value a { color: var(--dark-mode-border); }
        .supprimer-btn {
            background: none;
            border: none;
            color: #aaa;
            font-size: 1.2em;
            cursor: pointer;
            transition: color 0.2s;
            padding: 0;
        }
        .supprimer-btn:hover { color: var(--error-text); }
        body.dark-mode .supprimer-btn { color: #777; }
        body.dark-mode .supprimer-btn:hover { color: var(--error-text); }
        
        /* Panneau d'aperçu latéral */
        .preview-panel {
            position: fixed; top: 0; right: -760px;
            width: 740px; max-width: 90%; height: 100%;
            background-color: #fff;
            box-shadow: -4px 0 15px rgba(0, 0, 0, 0.1);
            transition: right 0.3s ease-in-out;
            z-index: 1000;
            display: flex; flex-direction: column;
            padding: 20px; box-sizing: border-box;
            overflow-y: auto;
        }
        .preview-panel.open { right: 0; }
        .preview-overlay {
            position: fixed; top: 0; left: 0;
            width: 100%; height: 100%;
            background-color: rgba(0, 0, 0, 0.4);
            z-index: 999;
            opacity: 0; visibility: hidden;
            transition: opacity 0.3s ease-in-out, visibility 0.3s ease-in-out;
        }
        .preview-overlay.open { opacity: 1; visibility: visible; }
        .preview-panel-header {
            display: flex; justify-content: space-between; align-items: center;
            margin-bottom: 20px; padding-bottom: 10px;
            border-bottom: 1px solid #eee;
        }
        .close-preview-btn {
            background: none; border: none; font-size: 1.5em; cursor: pointer; color: #888; transition: color 0.2s;
        }
        
        /* Footer */
        footer {
            background-color: #333; color: white;
            text-align: center; padding: 20px;
            margin-top: 40px; width: 100%;
        }
    </style>
</head>
<body>
    <div id="header-placeholder"></div>

    <main>
        <div class="create-workflow-button-container">
            <a href="creer-tip.html" class="create-workflow-button">Créer un Workflow</a>
        </div>

        <div class="tool-logos-section">
            <div class="tool-logos-header">
                <h2>Outils IA Populaires</h2>
                <div id="workflow-counter" class="workflow-counter">0</div>
            </div>
            <div class="tools-scroll-container">
                <button class="scroll-button left" id="scrollLeftBtn"><i class="fas fa-chevron-left"></i></button>
                <div id="tool-logos-grid" class="tools-grid"></div>
                <button class="scroll-button right" id="scrollRightBtn"><i class="fas fa-chevron-right"></i></button>
            </div>
        </div>

        <div class="filters-area-container">
            <div id="filters">
                <input type="text" id="search-input" placeholder="Rechercher un mot clé..." />
                <select id="filtre-outil"><option value="">Tous les outils</option></select>
                <select id="filtre-auteur"><option value="">Tous les auteurs</option></select>
                <select id="filtre-tri-date">
                    <option value="recent" selected>Plus récent</option>
                    <option value="ancien">Plus ancien</option>
                </select>
            </div>
        </div>

        <div class="galerie-container">
            <div id="success-message"></div>
            <div id="error-display" class="error-message" style="display: none;"></div>
            <div id="galerie">
                <p style="text-align: center;">Chargement des workflows...</p>
            </div>
        </div>
    </main>

    <div id="footer-placeholder"></div>
    <div id="previewOverlay" class="preview-overlay"></div>
    <div id="previewPanel" class="preview-panel">
        <div class="preview-panel-header">
            <h3 id="previewPanelTitle">Aperçu du contenu</h3>
            <button class="close-preview-btn" id="closePreviewBtn"><i class="fas fa-times"></i></button>
        </div>
        <div id="previewPanelContent" class="preview-panel-content"></div>
    </div>
    <script src="tools-data.js"></script>
    <script>
        const apiBase = window.location.origin + '/.netlify/functions/';
        let allTips = [];
        const galerieDiv = document.getElementById('galerie');
        const errorDisplay = document.getElementById('error-display');
        const filtreOutilSelect = document.getElementById('filtre-outil');
        const filtreTriDateSelect = document.getElementById('filtre-tri-date');
        const searchInput = document.getElementById('search-input');
        const previewPanel = document.getElementById('previewPanel');
        const previewPanelTitle = document.getElementById('previewPanelTitle');
        const previewPanelContent = document.getElementById('previewPanelContent');
        const closePreviewBtn = document.getElementById('closePreviewBtn');
        const bodyElement = document.body;
        const mainElement = document.querySelector('main');
        const previewOverlay = document.getElementById('previewOverlay');

        const workflowCounterDisplay = document.getElementById('workflow-counter');
        const filtreAuteurSelect = document.getElementById('filtre-auteur'); 

        const toolLogosGrid = document.getElementById('tool-logos-grid');
        const scrollLeftBtn = document.getElementById('scrollLeftBtn');
        const scrollRightBtn = document.getElementById('scrollRightBtn');

        function decodeHtml(html) {
            const textarea = document.createElement('textarea');
            textarea.innerHTML = html;
            return textarea.textContent;
        }

        function escapeHtml(text) {
            if (text === null || text === undefined) return '';
            text = String(text);
            const map = { '&': '&amp;', '<': '&lt;', '>': '&gt;', '"': '&quot;', "'": '&#039;' };
            return text.replace(/[&<>"']/g, function(m) { return map[m]; });
        }

        function getYouTubeVideoId(url) {
            if (!url) return null;
            const youtubeRegex = /(?:youtube\.com\/(?:[^\/\n\s]+\/\S+\/|(?:v|e(?:mbed)?)\/|\S*?[?&]v=)|youtu\.be\/)([a-zA-Z0-9_-]{11})/;
            const match = url.match(youtubeRegex);
            return (match && match[1]) ? match[1] : null;
        }

        async function loadComponent(url, placeholderId) {
            try {
                const res = await fetch(url);
                if (!res.ok) throw new Error(`HTTP error! status: ${res.status}`);
                document.getElementById(placeholderId).innerHTML = await res.text();
            } catch (error) {
                console.error(`Erreur lors du chargement de ${url}:`, error);
                document.getElementById(placeholderId).innerHTML = `<p style='color:red;text-align:center;'>Erreur de chargement.</p>`;
            }
        };

        function applyFiltersAndSort() {
            let filtered = [...allTips];
            const outil = filtreOutilSelect.value;
            if (outil) {
                filtered = filtered.filter(tip => tip.outil === outil);
            }
            const auteur = filtreAuteurSelect.value;
            if (auteur) {
                filtered = filtered.filter(tip => tip.auteur === auteur);
            }
            const searchText = searchInput.value.toLowerCase();
            if (searchText) {
                filtered = filtered.filter(tip =>
                    (tip.titre && decodeHtml(tip.titre).toLowerCase().includes(searchText)) ||
                    (tip.description && decodeHtml(tip.description).toLowerCase().includes(searchText))
                );
            }
            const sortOrderDate = filtreTriDateSelect.value;
            filtered.sort((a, b) => {
                const dateA = new Date(a.dateCreation || a.date);
                const dateB = new Date(b.dateCreation || b.date);
                return sortOrderDate === 'recent' ? dateB.getTime() - dateA.getTime() : dateA.getTime() - dateB.getTime();
            });
            displayTips(filtered);
        }

        function setupFilters() {
            searchInput.addEventListener('input', applyFiltersAndSort);
            filtreTriDateSelect.addEventListener('change', applyFiltersAndSort);
            filtreOutilSelect.addEventListener('change', applyFiltersAndSort);
            filtreAuteurSelect.addEventListener('change', applyFiltersAndSort);
            populateOutilFilter();
        }

        function populateOutilFilter() {
            filtreOutilSelect.innerHTML = '<option value="">Tous les outils</option>';
            const uniqueTools = [...new Set(toolsData.map(tool => tool.name))].sort();
            uniqueTools.forEach(toolName => {
                const option = document.createElement('option');
                option.value = toolName;
                option.textContent = toolName;
                filtreOutilSelect.appendChild(option);
            });
        }

        function populateAuteurFilter() {
            filtreAuteurSelect.innerHTML = '<option value="">Tous les auteurs</option>';
            const uniqueAuteurs = [...new Set(allTips.map(tip => tip.auteur))].sort((a, b) => a.localeCompare(b));
            uniqueAuteurs.forEach(auteurName => {
                const option = document.createElement('option');
                option.value = auteurName;
                option.textContent = auteurName;
                filtreAuteurSelect.appendChild(option);
            });
        }

        async function loadAndDisplayTips() {
            galerieDiv.innerHTML = '<p style="text-align: center;">Chargement des workflows...</p>';
            try {
                const response = await fetch(`${apiBase}get-tips`);
                if (!response.ok) throw new Error(`HTTP error! status: ${response.status}`);
                let fetchedTips = await response.json();
                allTips = fetchedTips.map(tip => ({
                    ...tip, id: String(tip.id),
                    dateCreation: tip.date_creation || tip.dateCreation || new Date().toISOString(),
                    titre: tip.titre || "Titre non spécifié",
                    auteur: tip.auteur || "Auteur inconnu",
                    outil: tip.outil || "Non spécifié",
                }));
                workflowCounterDisplay.textContent = allTips.length;
                populateAuteurFilter();
                applyFiltersAndSort();
            } catch (error) {
                console.error("Erreur chargement:", error);
                errorDisplay.style.display = 'block';
                errorDisplay.textContent = `Erreur: ${error.message}`;
                galerieDiv.innerHTML = '';
            }
        }

        function displayTips(tipsToDisplay) {
            galerieDiv.innerHTML = '';
            if (tipsToDisplay.length === 0) {
                galerieDiv.innerHTML = '<p style="text-align: center;">Aucun workflow ne correspond à vos filtres.</p>';
                return;
            }
            tipsToDisplay.forEach(tip => {
                const dateObj = new Date(tip.dateCreation);
                const formattedDate = dateObj.toLocaleDateString('fr-FR', { year: 'numeric', month: 'long', day: 'numeric' });
                const auteurLink = `<a href="equipe.html?auteur=${encodeURIComponent(tip.auteur)}">${escapeHtml(tip.auteur)}</a>`;
                let copyButtonHtml = '';
                const contentForCopyButton = tip.promptText || tip.description;
                if (contentForCopyButton) {
                    copyButtonHtml = `<button class="copier-btn" data-copy="${escapeHtml(contentForCopyButton)}">Copier le prompt</button>`;
                }
                let previewImageHtml = '';
                const firstImage = (tip.fileUrls && tip.fileUrls.length > 0) ? tip.fileUrls[0] : tip.imageUrl;
                if (firstImage) {
                    previewImageHtml = `<img src="${escapeHtml(firstImage)}" alt="Aperçu" class="card-thumbnail-preview">`;
                }
                
                const cardHtml = `
                    <div class="carte" style="border-left-color: ${getToolColor(tip.outil)};">
                        <div class="card-header">
                            <h3 class="tip-title">${escapeHtml(tip.titre)}</h3>
                            <button class="supprimer-btn" data-id="${tip.id}" title="Supprimer"><i class="fas fa-trash-alt"></i></button>
                        </div>
                        <span class="outil-badge">${escapeHtml(tip.outil)}</span>
                        ${previewImageHtml ? `<div class="card-image-container">${previewImageHtml}</div>` : ''}
                        <div class="card-actions">
                            <button class="toggle-content-btn" data-id="${tip.id}">Voir le Workflow</button>
                            ${copyButtonHtml}
                        </div>
                        <div class="metadata-section">
                            <span class="metadata-value auteur-value">Par ${auteurLink}</span>
                            <span class="metadata-value date-value">${formattedDate}</span>
                        </div>
                    </div>
                `;
                galerieDiv.insertAdjacentHTML('beforeend', cardHtml);
            });
            attachEventListenersToCards();
        }

        function getToolColor(toolName) {
            if (!toolName) return '#cccccc';
            let hash = 0;
            for (let i = 0; i < toolName.length; i++) {
                hash = toolName.charCodeAt(i) + ((hash << 5) - hash);
                hash = hash & hash;
            }
            const hue = hash % 360;
            return `hsl(${hue}, 70%, 60%)`;
        }

        function attachEventListenersToCards() {
            document.querySelectorAll('.toggle-content-btn').forEach(b => b.onclick = (e) => openPreviewPanel(e.target.dataset.id));
            document.querySelectorAll('.copier-btn').forEach(b => b.onclick = (e) => copyToClipboard(e.target.dataset.copy, e.target));
            document.querySelectorAll('.supprimer-btn').forEach(b => b.onclick = (e) => confirmAndDeleteTip(e.target.closest('button').dataset.id));
        }

        function openPreviewPanel(tipId) {
            const tip = allTips.find(t => t.id === tipId);
            if (!tip) return;
            previewPanelTitle.textContent = decodeHtml(tip.titre);
            let contentHtml = '';
            // Construction dynamique du contenu du panneau
            if (tip.description) contentHtml += `<h4>Description</h4><p>${escapeHtml(tip.description)}</p>`;
            if (tip.promptText) contentHtml += `<h4>Prompt</h4><pre>${escapeHtml(tip.promptText)}</pre>`;
            // ... (logique pour URLs, images, etc.)
            previewPanelContent.innerHTML = contentHtml;
            previewPanel.classList.add('open');
            previewOverlay.classList.add('open');
            bodyElement.style.overflow = 'hidden';
        }

        function closePreviewPanel() {
            previewPanel.classList.remove('open');
            previewOverlay.classList.remove('open');
            bodyElement.style.overflow = '';
        }

        closePreviewBtn.addEventListener('click', closePreviewPanel);
        previewOverlay.addEventListener('click', closePreviewPanel);

        async function copyToClipboard(text, buttonElement) {
            try {
                await navigator.clipboard.writeText(text);
                const originalText = buttonElement.textContent;
                buttonElement.textContent = 'Copié !';
                setTimeout(() => { buttonElement.textContent = originalText; }, 1500);
            } catch (err) { console.error('Échec de la copie', err); }
        }

        async function confirmAndDeleteTip(tipId) {
            if (confirm("Êtes-vous sûr de vouloir supprimer ce workflow ?")) {
                try {
                    const response = await fetch(`${apiBase}delete-tip`, {
                        method: 'DELETE', headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify({ id: tipId })
                    });
                    if (!response.ok) throw new Error('La suppression a échoué.');
                    loadAndDisplayTips();
                } catch(err) { alert('Erreur: ' + err.message); }
            }
        }
        
        // Initialisation de la page
        document.addEventListener("DOMContentLoaded", async () => {
            await Promise.all([
                loadComponent("header.html", "header-placeholder"),
                loadComponent("footer.html", "footer-placeholder")
            ]);
            setupFilters();
            // renderToolLogos(); // Assurez-vous que la fonction existe si vous l'utilisez
            // setupScrollButtons(); // Idem
            await loadAndDisplayTips();
        });
    </script>
</body>
</html>
